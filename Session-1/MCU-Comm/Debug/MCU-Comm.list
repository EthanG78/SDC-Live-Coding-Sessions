
MCU-Comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f10  08003f10  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f10  08003f10  00004f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f18  08003f18  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00004f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00004f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08003f7c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003f7c  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a85d  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab0  00000000  00000000  0000f8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000608  00000000  00000000  00011b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025218  00000000  00000000  00012190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b360  00000000  00000000  000373a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e64f5  00000000  00000000  00042708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128bfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002408  00000000  00000000  00128c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0012b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e98 	.word	0x08003e98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003e98 	.word	0x08003e98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <uart_tx_bytes>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void uart_tx_bytes(UART_HandleTypeDef *uart, const uint8_t *bytes, uint32_t nBytes)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
	const uint8_t *pData = bytes;
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	617b      	str	r3, [r7, #20]
	uint32_t nData = nBytes;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	613b      	str	r3, [r7, #16]

	while (nData > 0)
 80005b4:	e012      	b.n	80005dc <uart_tx_bytes+0x3c>
	{
		while(!(uart->Instance->ISR & 0x80));
 80005b6:	bf00      	nop
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d0f8      	beq.n	80005b8 <uart_tx_bytes+0x18>

		uart->Instance->TDR = *pData;
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
		pData++;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
		nData--;
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	3b01      	subs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
	while (nData > 0)
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e9      	bne.n	80005b6 <uart_tx_bytes+0x16>
	}
}
 80005e2:	bf00      	nop
 80005e4:	bf00      	nop
 80005e6:	371c      	adds	r7, #28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb0c 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f82d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8c7 	bl	8000790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000602:	f000 f895 	bl	8000730 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t MSG[35] = {'\0'};
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	221f      	movs	r2, #31
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f002 ffc0 	bl	8003598 <memset>
  // uint8_t bytesReceived[35];
  uint8_t i = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  while (1)
  {
	  // uart_rx_bytes(&huart3, bytesReceived, sizeof(bytesReceived));
	  // uart_tx_bytes(&huart3, MSG, sizeof(MSG));

	  sprintf((char*)MSG, "Hello SDC! i = %d\r\n", i);
 800061e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	490a      	ldr	r1, [pc, #40]	@ (8000650 <main+0x60>)
 8000626:	4618      	mov	r0, r3
 8000628:	f002 ff96 	bl	8003558 <siprintf>
	  uart_tx_bytes(&huart3, MSG, sizeof(MSG));
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2223      	movs	r2, #35	@ 0x23
 8000630:	4619      	mov	r1, r3
 8000632:	4808      	ldr	r0, [pc, #32]	@ (8000654 <main+0x64>)
 8000634:	f7ff ffb4 	bl	80005a0 <uart_tx_bytes>
	  HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800063c:	f000 fb46 	bl	8000ccc <HAL_Delay>
	  i++;
 8000640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000644:	3301      	adds	r3, #1
 8000646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  sprintf((char*)MSG, "Hello SDC! i = %d\r\n", i);
 800064a:	bf00      	nop
 800064c:	e7e7      	b.n	800061e <main+0x2e>
 800064e:	bf00      	nop
 8000650:	08003eb0 	.word	0x08003eb0
 8000654:	20000078 	.word	0x20000078

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ff96 	bl	8003598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a29      	ldr	r2, [pc, #164]	@ (8000728 <SystemClock_Config+0xd0>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b25      	ldr	r3, [pc, #148]	@ (800072c <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a24      	ldr	r2, [pc, #144]	@ (800072c <SystemClock_Config+0xd4>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c4:	23d8      	movs	r3, #216	@ 0xd8
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fed7 	bl	8001488 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e0:	f000 f95a 	bl	8000998 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e4:	f000 fe80 	bl	80013e8 <HAL_PWREx_EnableOverDrive>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ee:	f000 f953 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2302      	movs	r3, #2
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	2107      	movs	r1, #7
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f95d 	bl	80019d0 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800071c:	f000 f93c 	bl	8000998 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3750      	adds	r7, #80	@ 0x50
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	@ (800078c <MX_USART3_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_USART3_UART_Init+0x58>)
 8000774:	f001 ff42 	bl	80025fc <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f90b 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000078 	.word	0x20000078
 800078c:	40004800 	.word	0x40004800

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	@ 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b77      	ldr	r3, [pc, #476]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a76      	ldr	r2, [pc, #472]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b74      	ldr	r3, [pc, #464]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	4b71      	ldr	r3, [pc, #452]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a70      	ldr	r2, [pc, #448]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b6e      	ldr	r3, [pc, #440]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b6b      	ldr	r3, [pc, #428]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a6a      	ldr	r2, [pc, #424]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b68      	ldr	r3, [pc, #416]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	4b65      	ldr	r3, [pc, #404]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a64      	ldr	r2, [pc, #400]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b62      	ldr	r3, [pc, #392]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b5f      	ldr	r3, [pc, #380]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a5e      	ldr	r2, [pc, #376]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b5c      	ldr	r3, [pc, #368]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800081e:	4b59      	ldr	r3, [pc, #356]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a58      	ldr	r2, [pc, #352]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 8000824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b56      	ldr	r3, [pc, #344]	@ (8000984 <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f244 0181 	movw	r1, #16513	@ 0x4081
 800083c:	4852      	ldr	r0, [pc, #328]	@ (8000988 <MX_GPIO_Init+0x1f8>)
 800083e:	f000 fdb9 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2140      	movs	r1, #64	@ 0x40
 8000846:	4851      	ldr	r0, [pc, #324]	@ (800098c <MX_GPIO_Init+0x1fc>)
 8000848:	f000 fdb4 	bl	80013b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000852:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	484b      	ldr	r0, [pc, #300]	@ (8000990 <MX_GPIO_Init+0x200>)
 8000864:	f000 fbfa 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000868:	2332      	movs	r3, #50	@ 0x32
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000878:	230b      	movs	r3, #11
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4843      	ldr	r0, [pc, #268]	@ (8000990 <MX_GPIO_Init+0x200>)
 8000884:	f000 fbea 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000888:	2386      	movs	r3, #134	@ 0x86
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000898:	230b      	movs	r3, #11
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	483c      	ldr	r0, [pc, #240]	@ (8000994 <MX_GPIO_Init+0x204>)
 80008a4:	f000 fbda 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4831      	ldr	r0, [pc, #196]	@ (8000988 <MX_GPIO_Init+0x1f8>)
 80008c2:	f000 fbcb 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d8:	230b      	movs	r3, #11
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4829      	ldr	r0, [pc, #164]	@ (8000988 <MX_GPIO_Init+0x1f8>)
 80008e4:	f000 fbba 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e8:	2340      	movs	r3, #64	@ 0x40
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4823      	ldr	r0, [pc, #140]	@ (800098c <MX_GPIO_Init+0x1fc>)
 8000900:	f000 fbac 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	481d      	ldr	r0, [pc, #116]	@ (800098c <MX_GPIO_Init+0x1fc>)
 8000918:	f000 fba0 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800091c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092e:	230a      	movs	r3, #10
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4816      	ldr	r0, [pc, #88]	@ (8000994 <MX_GPIO_Init+0x204>)
 800093a:	f000 fb8f 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800093e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <MX_GPIO_Init+0x204>)
 8000954:	f000 fb82 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000958:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096a:	230b      	movs	r3, #11
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_GPIO_Init+0x1fc>)
 8000976:	f000 fb71 	bl	800105c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	@ 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	40020800 	.word	0x40020800
 8000994:	40020000 	.word	0x40020000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <Error_Handler+0x8>

080009a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b0aa      	sub	sp, #168	@ 0xa8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0310 	add.w	r3, r7, #16
 8000a08:	2284      	movs	r2, #132	@ 0x84
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fdc3 	bl	8003598 <memset>
  if(huart->Instance==USART3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a26      	ldr	r2, [pc, #152]	@ (8000ab0 <HAL_UART_MspInit+0xc4>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d144      	bne.n	8000aa6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f9f6 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a36:	f7ff ffaf 	bl	8000998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_UART_MspInit+0xc8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a84:	2307      	movs	r3, #7
 8000a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <HAL_UART_MspInit+0xcc>)
 8000a92:	f000 fae3 	bl	800105c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2027      	movs	r0, #39	@ 0x27
 8000a9c:	f000 fa15 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000aa0:	2027      	movs	r0, #39	@ 0x27
 8000aa2:	f000 fa2e 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	37a8      	adds	r7, #168	@ 0xa8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004800 	.word	0x40004800
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b12:	f000 f8bb 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <USART3_IRQHandler+0x10>)
 8000b22:	f001 fdb9 	bl	8002698 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000078 	.word	0x20000078

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	@ (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f002 fd22 	bl	80035a8 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	@ (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20050000 	.word	0x20050000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000100 	.word	0x20000100
 8000b98:	20000250 	.word	0x20000250

08000b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f002 fce1 	bl	80035b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fcfd 	bl	80005f0 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c04:	08003f20 	.word	0x08003f20
  ldr r2, =_sbss
 8000c08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c0c:	20000250 	.word	0x20000250

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>

08000c12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f94c 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 f805 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff febf 	bl	80009a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f967 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f92f 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000104 	.word	0x20000104

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000104 	.word	0x20000104

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	05fa0000 	.word	0x05fa0000

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	@ (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	@ (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	@ (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	@ 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	@ 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff feb6 	bl	8000cb4 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d008      	beq.n	8000f68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e052      	b.n	800100e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0216 	bic.w	r2, r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_DMA_Abort+0x62>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 0208 	bic.w	r2, r2, #8
 8000fa6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb8:	e013      	b.n	8000fe2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fba:	f7ff fe7b 	bl	8000cb4 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d90c      	bls.n	8000fe2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2220      	movs	r2, #32
 8000fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e015      	b.n	800100e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e4      	bne.n	8000fba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff4:	223f      	movs	r2, #63	@ 0x3f
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d004      	beq.n	8001034 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2280      	movs	r2, #128	@ 0x80
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e00c      	b.n	800104e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e175      	b.n	8001368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8164 	bne.w	8001362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x56>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80be 	beq.w	8001362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b66      	ldr	r3, [pc, #408]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a65      	ldr	r2, [pc, #404]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b63      	ldr	r3, [pc, #396]	@ (8001380 <HAL_GPIO_Init+0x324>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011fe:	4a61      	ldr	r2, [pc, #388]	@ (8001384 <HAL_GPIO_Init+0x328>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <HAL_GPIO_Init+0x32c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d037      	beq.n	800129a <HAL_GPIO_Init+0x23e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a57      	ldr	r2, [pc, #348]	@ (800138c <HAL_GPIO_Init+0x330>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_GPIO_Init+0x23a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <HAL_GPIO_Init+0x334>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x236>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a55      	ldr	r2, [pc, #340]	@ (8001394 <HAL_GPIO_Init+0x338>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x232>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a54      	ldr	r2, [pc, #336]	@ (8001398 <HAL_GPIO_Init+0x33c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a53      	ldr	r2, [pc, #332]	@ (800139c <HAL_GPIO_Init+0x340>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x22a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a52      	ldr	r2, [pc, #328]	@ (80013a0 <HAL_GPIO_Init+0x344>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x226>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a51      	ldr	r2, [pc, #324]	@ (80013a4 <HAL_GPIO_Init+0x348>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x222>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a50      	ldr	r2, [pc, #320]	@ (80013a8 <HAL_GPIO_Init+0x34c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x21e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4f      	ldr	r2, [pc, #316]	@ (80013ac <HAL_GPIO_Init+0x350>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x21a>
 8001272:	2309      	movs	r3, #9
 8001274:	e012      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001276:	230a      	movs	r3, #10
 8001278:	e010      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127a:	2308      	movs	r3, #8
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127e:	2307      	movs	r3, #7
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x240>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ac:	4935      	ldr	r1, [pc, #212]	@ (8001384 <HAL_GPIO_Init+0x328>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012de:	4a34      	ldr	r2, [pc, #208]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800130e:	4b28      	ldr	r3, [pc, #160]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001332:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135c:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <HAL_GPIO_Init+0x354>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae86 	bls.w	800107c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3724      	adds	r7, #36	@ 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40022400 	.word	0x40022400
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c4:	787b      	ldrb	r3, [r7, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ca:	887a      	ldrh	r2, [r7, #2]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013d0:	e003      	b.n	80013da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	041a      	lsls	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a22      	ldr	r2, [pc, #136]	@ (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_PWREx_EnableOverDrive+0x98>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001414:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001416:	f7ff fc4d 	bl	8000cb4 <HAL_GetTick>
 800141a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800141c:	e009      	b.n	8001432 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800141e:	f7ff fc49 	bl	8000cb4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800142c:	d901      	bls.n	8001432 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e022      	b.n	8001478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143e:	d1ee      	bne.n	800141e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001440:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144c:	f7ff fc32 	bl	8000cb4 <HAL_GetTick>
 8001450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001452:	e009      	b.n	8001468 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001454:	f7ff fc2e 	bl	8000cb4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001462:	d901      	bls.n	8001468 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e007      	b.n	8001478 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001474:	d1ee      	bne.n	8001454 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40007000 	.word	0x40007000

08001488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e291      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8087 	beq.w	80015ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ac:	4b96      	ldr	r3, [pc, #600]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d00c      	beq.n	80014d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b8:	4b93      	ldr	r3, [pc, #588]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
 80014c4:	4b90      	ldr	r3, [pc, #576]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b8d      	ldr	r3, [pc, #564]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d06c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x130>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d168      	bne.n	80015b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e26b      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x7a>
 80014f4:	4b84      	ldr	r3, [pc, #528]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a83      	ldr	r2, [pc, #524]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e02e      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0x9c>
 800150a:	4b7f      	ldr	r3, [pc, #508]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b7c      	ldr	r3, [pc, #496]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a7b      	ldr	r2, [pc, #492]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800151c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e01d      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0xc0>
 800152e:	4b76      	ldr	r3, [pc, #472]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b73      	ldr	r3, [pc, #460]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a72      	ldr	r2, [pc, #456]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0xd8>
 8001548:	4b6f      	ldr	r3, [pc, #444]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800154e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a6b      	ldr	r2, [pc, #428]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800155e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fba4 	bl	8000cb4 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fba0 	bl	8000cb4 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	@ 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e21f      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0xe8>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb90 	bl	8000cb4 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fb8c 	bl	8000cb4 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e20b      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x110>
 80015b6:	e000      	b.n	80015ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d069      	beq.n	800169a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015c6:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d11c      	bne.n	8001618 <HAL_RCC_OscConfig+0x190>
 80015de:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d116      	bne.n	8001618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d005      	beq.n	8001602 <HAL_RCC_OscConfig+0x17a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d001      	beq.n	8001602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1df      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b41      	ldr	r3, [pc, #260]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	493d      	ldr	r1, [pc, #244]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	e040      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d023      	beq.n	8001668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a38      	ldr	r2, [pc, #224]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fb42 	bl	8000cb4 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fb3e 	bl	8000cb4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1bd      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b30      	ldr	r3, [pc, #192]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4929      	ldr	r1, [pc, #164]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
 8001666:	e018      	b.n	800169a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001668:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a26      	ldr	r2, [pc, #152]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fb1e 	bl	8000cb4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fb1a 	bl	8000cb4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e199      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d038      	beq.n	8001718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d019      	beq.n	80016e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80016b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fafb 	bl	8000cb4 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff faf7 	bl	8000cb4 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e176      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x23a>
 80016e0:	e01a      	b.n	8001718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_RCC_OscConfig+0x280>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fae1 	bl	8000cb4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00a      	b.n	800170c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fadd 	bl	8000cb4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d903      	bls.n	800170c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e15c      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
 8001708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b91      	ldr	r3, [pc, #580]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ee      	bne.n	80016f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a4 	beq.w	800186e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b8b      	ldr	r3, [pc, #556]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b88      	ldr	r3, [pc, #544]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a87      	ldr	r2, [pc, #540]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b85      	ldr	r3, [pc, #532]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b82      	ldr	r3, [pc, #520]	@ (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800175a:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x4d0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	@ (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff faa5 	bl	8000cb4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff faa1 	bl	8000cb4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	@ 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e120      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001780:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x31a>
 8001794:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001798:	4a6e      	ldr	r2, [pc, #440]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x33c>
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	4a69      	ldr	r2, [pc, #420]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b6:	4b67      	ldr	r3, [pc, #412]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	4a66      	ldr	r2, [pc, #408]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x35e>
 80017cc:	4b61      	ldr	r3, [pc, #388]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d0:	4a60      	ldr	r2, [pc, #384]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x376>
 80017e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	4a57      	ldr	r2, [pc, #348]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fa55 	bl	8000cb4 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fa51 	bl	8000cb4 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0ce      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b4b      	ldr	r3, [pc, #300]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x386>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fa3f 	bl	8000cb4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fa3b 	bl	8000cb4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0b8      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a3b      	ldr	r2, [pc, #236]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a4 	beq.w	80019c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d06b      	beq.n	800195c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d149      	bne.n	8001920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a30      	ldr	r2, [pc, #192]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fa0c 	bl	8000cb4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fa08 	bl	8000cb4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e087      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	4313      	orrs	r3, r2
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80018ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a18      	ldr	r2, [pc, #96]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f9dc 	bl	8000cb4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f9d8 	bl	8000cb4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e057      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x478>
 800191e:	e04f      	b.n	80019c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0b      	ldr	r2, [pc, #44]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800192a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f9c2 	bl	8000cb4 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f9be 	bl	8000cb4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e03d      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <HAL_RCC_OscConfig+0x4cc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x4ac>
 8001952:	e035      	b.n	80019c0 <HAL_RCC_OscConfig+0x538>
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <HAL_RCC_OscConfig+0x544>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d028      	beq.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d121      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0d0      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b67      	ldr	r3, [pc, #412]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	4965      	ldr	r1, [pc, #404]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a58      	ldr	r2, [pc, #352]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d040      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d115      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e073      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e06b      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab2:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f023 0203 	bic.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4936      	ldr	r1, [pc, #216]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ac4:	f7ff f8f6 	bl	8000cb4 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001acc:	f7ff f8f2 	bl	8000cb4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e053      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 020c 	and.w	r2, r3, #12
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1eb      	bne.n	8001acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d210      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	4922      	ldr	r1, [pc, #136]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x1cc>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f852 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08003ec4 	.word	0x08003ec4
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b094      	sub	sp, #80	@ 0x50
 8001bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb8:	2300      	movs	r3, #0
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	4b79      	ldr	r3, [pc, #484]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d00d      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f200 80e1 	bhi.w	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bda:	e0db      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b73      	ldr	r3, [pc, #460]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be0:	e0db      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be2:	4b73      	ldr	r3, [pc, #460]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be6:	e0d8      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b6f      	ldr	r3, [pc, #444]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0159      	lsls	r1, r3, #5
 8001c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2c:	0150      	lsls	r0, r2, #5
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4621      	mov	r1, r4
 8001c34:	1a51      	subs	r1, r2, r1
 8001c36:	6139      	str	r1, [r7, #16]
 8001c38:	4629      	mov	r1, r5
 8001c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	4651      	mov	r1, sl
 8001c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c56:	4651      	mov	r1, sl
 8001c58:	018a      	lsls	r2, r1, #6
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c60:	4659      	mov	r1, fp
 8001c62:	eb63 0901 	sbc.w	r9, r3, r1
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	eb18 0303 	adds.w	r3, r8, r3
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	462b      	mov	r3, r5
 8001c88:	eb49 0303 	adc.w	r3, r9, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	024b      	lsls	r3, r1, #9
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca4:	4621      	mov	r1, r4
 8001ca6:	024a      	lsls	r2, r1, #9
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cb8:	f7fe fafa 	bl	80002b0 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc4:	e058      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b38      	ldr	r3, [pc, #224]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cd6:	623b      	str	r3, [r7, #32]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce0:	4642      	mov	r2, r8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	f04f 0000 	mov.w	r0, #0
 8001ce8:	f04f 0100 	mov.w	r1, #0
 8001cec:	0159      	lsls	r1, r3, #5
 8001cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf2:	0150      	lsls	r0, r2, #5
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4641      	mov	r1, r8
 8001cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d18:	ebb2 040a 	subs.w	r4, r2, sl
 8001d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	00eb      	lsls	r3, r5, #3
 8001d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d2e:	00e2      	lsls	r2, r4, #3
 8001d30:	4614      	mov	r4, r2
 8001d32:	461d      	mov	r5, r3
 8001d34:	4643      	mov	r3, r8
 8001d36:	18e3      	adds	r3, r4, r3
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d4e:	4629      	mov	r1, r5
 8001d50:	028b      	lsls	r3, r1, #10
 8001d52:	4621      	mov	r1, r4
 8001d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d58:	4621      	mov	r1, r4
 8001d5a:	028a      	lsls	r2, r1, #10
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d62:	2200      	movs	r2, #0
 8001d64:	61bb      	str	r3, [r7, #24]
 8001d66:	61fa      	str	r2, [r7, #28]
 8001d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6c:	f7fe faa0 	bl	80002b0 <__aeabi_uldivmod>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4613      	mov	r3, r2
 8001d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	3301      	adds	r3, #1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d92:	e002      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d94:	4b05      	ldr	r3, [pc, #20]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x204>)
 8001d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3750      	adds	r7, #80	@ 0x50
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200

08001db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000000 	.word	0x20000000

08001dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd0:	f7ff fff0 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	@ (8001df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08003ed4 	.word	0x08003ed4

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df8:	f7ff ffdc 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0b5b      	lsrs	r3, r3, #13
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08003ed4 	.word	0x08003ed4

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e44:	4b69      	ldr	r3, [pc, #420]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a68      	ldr	r2, [pc, #416]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e4e:	6093      	str	r3, [r2, #8]
 8001e50:	4b66      	ldr	r3, [pc, #408]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e58:	4964      	ldr	r1, [pc, #400]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d017      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e84:	4959      	ldr	r1, [pc, #356]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	494a      	ldr	r1, [pc, #296]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 808b 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	4a39      	ldr	r2, [pc, #228]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0c:	4b37      	ldr	r3, [pc, #220]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f18:	4b35      	ldr	r3, [pc, #212]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a34      	ldr	r2, [pc, #208]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe fec6 	bl	8000cb4 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe fec2 	bl	8000cb4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	@ 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e357      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4a:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d035      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d02e      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f76:	4a1d      	ldr	r2, [pc, #116]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f82:	4a1a      	ldr	r2, [pc, #104]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f8a:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d114      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fe8a 	bl	8000cb4 <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fe86 	bl	8000cb4 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e319      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	4901      	ldr	r1, [pc, #4]	@ (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
 8001fea:	e00b      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	0ffffcff 	.word	0x0ffffcff
 8001ff8:	4baa      	ldr	r3, [pc, #680]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4aa9      	ldr	r2, [pc, #676]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	4ba7      	ldr	r3, [pc, #668]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002006:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	49a4      	ldr	r1, [pc, #656]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002012:	4313      	orrs	r3, r2
 8002014:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002022:	4ba0      	ldr	r3, [pc, #640]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002028:	4a9e      	ldr	r2, [pc, #632]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002032:	4b9c      	ldr	r3, [pc, #624]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002034:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800203c:	4999      	ldr	r1, [pc, #612]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002050:	4b94      	ldr	r3, [pc, #592]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800205e:	4991      	ldr	r1, [pc, #580]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002072:	4b8c      	ldr	r3, [pc, #560]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002078:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002080:	4988      	ldr	r1, [pc, #544]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002094:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	4980      	ldr	r1, [pc, #512]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020b6:	4b7b      	ldr	r3, [pc, #492]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4977      	ldr	r1, [pc, #476]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d8:	4b72      	ldr	r3, [pc, #456]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	496f      	ldr	r1, [pc, #444]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fa:	4b6a      	ldr	r3, [pc, #424]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002100:	f023 020c 	bic.w	r2, r3, #12
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002108:	4966      	ldr	r1, [pc, #408]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211c:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002122:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	495e      	ldr	r1, [pc, #376]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002144:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800214c:	4955      	ldr	r1, [pc, #340]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002160:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002166:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	494d      	ldr	r1, [pc, #308]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002182:	4b48      	ldr	r3, [pc, #288]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002188:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	4944      	ldr	r1, [pc, #272]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021a4:	4b3f      	ldr	r3, [pc, #252]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	493c      	ldr	r1, [pc, #240]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021c6:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	4933      	ldr	r1, [pc, #204]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021e8:	4b2e      	ldr	r3, [pc, #184]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021f6:	492b      	ldr	r1, [pc, #172]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d011      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800220a:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002210:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002218:	4922      	ldr	r1, [pc, #136]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002250:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002258:	4912      	ldr	r1, [pc, #72]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226c:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800227c:	4909      	ldr	r1, [pc, #36]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d006      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80d9 	beq.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002298:	4b02      	ldr	r3, [pc, #8]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a01      	ldr	r2, [pc, #4]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022aa:	f7fe fd03 	bl	8000cb4 <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022b2:	f7fe fcff 	bl	8000cb4 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	@ 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e194      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11d      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022e4:	4b64      	ldr	r3, [pc, #400]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022f2:	4b61      	ldr	r3, [pc, #388]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022f8:	0e1b      	lsrs	r3, r3, #24
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	019a      	lsls	r2, r3, #6
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	071b      	lsls	r3, r3, #28
 8002318:	4957      	ldr	r1, [pc, #348]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d02e      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800234a:	d129      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800234c:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800235a:	4b47      	ldr	r3, [pc, #284]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002360:	0f1b      	lsrs	r3, r3, #28
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	019a      	lsls	r2, r3, #6
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	071b      	lsls	r3, r3, #28
 8002380:	493d      	ldr	r1, [pc, #244]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002388:	4b3b      	ldr	r3, [pc, #236]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238e:	f023 021f 	bic.w	r2, r3, #31
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	3b01      	subs	r3, #1
 8002398:	4937      	ldr	r1, [pc, #220]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ac:	4b32      	ldr	r3, [pc, #200]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023c0:	0f1b      	lsrs	r3, r3, #28
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	019a      	lsls	r2, r3, #6
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	4925      	ldr	r1, [pc, #148]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	019a      	lsls	r2, r3, #6
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	071b      	lsls	r3, r3, #28
 8002410:	4919      	ldr	r1, [pc, #100]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002418:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a16      	ldr	r2, [pc, #88]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fc46 	bl	8000cb4 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800242c:	f7fe fc42 	bl	8000cb4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0d7      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 80cd 	bne.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245e:	f7fe fc29 	bl	8000cb4 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002466:	f7fe fc25 	bl	8000cb4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	@ 0x64
 8002472:	d903      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0ba      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800247c:	4b5e      	ldr	r3, [pc, #376]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002488:	d0ed      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02e      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024b2:	4b51      	ldr	r3, [pc, #324]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024c0:	4b4d      	ldr	r3, [pc, #308]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	0f1b      	lsrs	r3, r3, #28
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4944      	ldr	r1, [pc, #272]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ee:	4b42      	ldr	r3, [pc, #264]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	493d      	ldr	r1, [pc, #244]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800251c:	d11d      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800251e:	4b36      	ldr	r3, [pc, #216]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800252c:	4b32      	ldr	r3, [pc, #200]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002532:	0f1b      	lsrs	r3, r3, #28
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	019a      	lsls	r2, r3, #6
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	4929      	ldr	r1, [pc, #164]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002566:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256c:	0e1b      	lsrs	r3, r3, #24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002574:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	019a      	lsls	r2, r3, #6
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	4917      	ldr	r1, [pc, #92]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	4911      	ldr	r1, [pc, #68]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025b8:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0e      	ldr	r2, [pc, #56]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fb76 	bl	8000cb4 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025cc:	f7fe fb72 	bl	8000cb4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e007      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025ea:	d1ef      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e040      	b.n	8002690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f9e4 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fd7e 	bl	8003144 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fb17 	bl	8002c7c <UART_SetConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01b      	b.n	8002690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fdfd 	bl	8003288 <UART_CheckIdleState>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b0ba      	sub	sp, #232	@ 0xe8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80026c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80026c6:	4013      	ands	r3, r2
 80026c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80026cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d115      	bne.n	8002700 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00f      	beq.n	8002700 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8297 	beq.w	8002c24 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
      }
      return;
 80026fe:	e291      	b.n	8002c24 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8117 	beq.w	8002938 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800271a:	4b85      	ldr	r3, [pc, #532]	@ (8002930 <HAL_UART_IRQHandler+0x298>)
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 810a 	beq.w	8002938 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d011      	beq.n	8002754 <HAL_UART_IRQHandler+0xbc>
 8002730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2201      	movs	r2, #1
 8002742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <HAL_UART_IRQHandler+0xec>
 8002760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2202      	movs	r2, #2
 8002772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800277a:	f043 0204 	orr.w	r2, r3, #4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d011      	beq.n	80027b4 <HAL_UART_IRQHandler+0x11c>
 8002790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2204      	movs	r2, #4
 80027a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027aa:	f043 0202 	orr.w	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d105      	bne.n	80027d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2208      	movs	r2, #8
 80027de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e6:	f043 0208 	orr.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d012      	beq.n	8002822 <HAL_UART_IRQHandler+0x18a>
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002800:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 81fd 	beq.w	8002c28 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800285c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286a:	2b40      	cmp	r3, #64	@ 0x40
 800286c:	d005      	beq.n	800287a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800286e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002872:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	d04f      	beq.n	800291a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fdc8 	bl	8003410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b40      	cmp	r3, #64	@ 0x40
 800288c:	d141      	bne.n	8002912 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3308      	adds	r3, #8
 8002894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3308      	adds	r3, #8
 80028b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028ca:	e841 2300 	strex	r3, r2, [r1]
 80028ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1d9      	bne.n	800288e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <HAL_UART_IRQHandler+0x29c>)
 80028e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fb91 	bl	8001016 <HAL_DMA_Abort_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d017      	beq.n	800292a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002904:	4610      	mov	r0, r2
 8002906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002908:	e00f      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f9a0 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002910:	e00b      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f99c 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e007      	b.n	800292a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f998 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002928:	e17e      	b.n	8002c28 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292a:	bf00      	nop
    return;
 800292c:	e17c      	b.n	8002c28 <HAL_UART_IRQHandler+0x590>
 800292e:	bf00      	nop
 8002930:	04000120 	.word	0x04000120
 8002934:	080034d9 	.word	0x080034d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 814c 	bne.w	8002bda <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8145 	beq.w	8002bda <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 813e 	beq.w	8002bda <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2210      	movs	r2, #16
 8002964:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002970:	2b40      	cmp	r3, #64	@ 0x40
 8002972:	f040 80b6 	bne.w	8002ae2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002982:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8150 	beq.w	8002c2c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002996:	429a      	cmp	r2, r3
 8002998:	f080 8148 	bcs.w	8002c2c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029b0:	f000 8086 	beq.w	8002ac0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1da      	bne.n	80029b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3308      	adds	r3, #8
 8002a04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a08:	e853 3f00 	ldrex	r3, [r3]
 8002a0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e1      	bne.n	80029fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3308      	adds	r3, #8
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e3      	bne.n	8002a3a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a90:	f023 0310 	bic.w	r3, r3, #16
 8002a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002aa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e4      	bne.n	8002a80 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fa3b 	bl	8000f36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f8c2 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ae0:	e0a4      	b.n	8002c2c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8096 	beq.w	8002c30 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8091 	beq.w	8002c30 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e4      	bne.n	8002b0e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	e853 3f00 	ldrex	r3, [r3]
 8002b52:	623b      	str	r3, [r7, #32]
   return(result);
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3308      	adds	r3, #8
 8002b64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b68:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e3      	bne.n	8002b44 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	e853 3f00 	ldrex	r3, [r3]
 8002b9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0310 	bic.w	r3, r3, #16
 8002ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e4      	bne.n	8002b90 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f846 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bd8:	e02a      	b.n	8002c30 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01c      	beq.n	8002c34 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
    }
    return;
 8002c02:	e017      	b.n	8002c34 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_UART_IRQHandler+0x59e>
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fc71 	bl	8003504 <UART_EndTransmit_IT>
    return;
 8002c22:	e008      	b.n	8002c36 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c24:	bf00      	nop
 8002c26:	e006      	b.n	8002c36 <HAL_UART_IRQHandler+0x59e>
    return;
 8002c28:	bf00      	nop
 8002c2a:	e004      	b.n	8002c36 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c2c:	bf00      	nop
 8002c2e:	e002      	b.n	8002c36 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c30:	bf00      	nop
 8002c32:	e000      	b.n	8002c36 <HAL_UART_IRQHandler+0x59e>
    return;
 8002c34:	bf00      	nop
  }

}
 8002c36:	37e8      	adds	r7, #232	@ 0xe8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4ba6      	ldr	r3, [pc, #664]	@ (8002f40 <UART_SetConfig+0x2c4>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	6979      	ldr	r1, [r7, #20]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a94      	ldr	r2, [pc, #592]	@ (8002f44 <UART_SetConfig+0x2c8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d120      	bne.n	8002d3a <UART_SetConfig+0xbe>
 8002cf8:	4b93      	ldr	r3, [pc, #588]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d816      	bhi.n	8002d34 <UART_SetConfig+0xb8>
 8002d06:	a201      	add	r2, pc, #4	@ (adr r2, 8002d0c <UART_SetConfig+0x90>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d29 	.word	0x08002d29
 8002d14:	08002d23 	.word	0x08002d23
 8002d18:	08002d2f 	.word	0x08002d2f
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e150      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d22:	2302      	movs	r3, #2
 8002d24:	77fb      	strb	r3, [r7, #31]
 8002d26:	e14d      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e14a      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d2e:	2308      	movs	r3, #8
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e147      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d34:	2310      	movs	r3, #16
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e144      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a83      	ldr	r2, [pc, #524]	@ (8002f4c <UART_SetConfig+0x2d0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d132      	bne.n	8002daa <UART_SetConfig+0x12e>
 8002d44:	4b80      	ldr	r3, [pc, #512]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d828      	bhi.n	8002da4 <UART_SetConfig+0x128>
 8002d52:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <UART_SetConfig+0xdc>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002da5 	.word	0x08002da5
 8002d60:	08002da5 	.word	0x08002da5
 8002d64:	08002da5 	.word	0x08002da5
 8002d68:	08002d99 	.word	0x08002d99
 8002d6c:	08002da5 	.word	0x08002da5
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002da5 	.word	0x08002da5
 8002d78:	08002d93 	.word	0x08002d93
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002da5 	.word	0x08002da5
 8002d88:	08002d9f 	.word	0x08002d9f
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e118      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e115      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e112      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e10f      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002da4:	2310      	movs	r3, #16
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	e10c      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a68      	ldr	r2, [pc, #416]	@ (8002f50 <UART_SetConfig+0x2d4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d120      	bne.n	8002df6 <UART_SetConfig+0x17a>
 8002db4:	4b64      	ldr	r3, [pc, #400]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002dbe:	2b30      	cmp	r3, #48	@ 0x30
 8002dc0:	d013      	beq.n	8002dea <UART_SetConfig+0x16e>
 8002dc2:	2b30      	cmp	r3, #48	@ 0x30
 8002dc4:	d814      	bhi.n	8002df0 <UART_SetConfig+0x174>
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d009      	beq.n	8002dde <UART_SetConfig+0x162>
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d810      	bhi.n	8002df0 <UART_SetConfig+0x174>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <UART_SetConfig+0x15c>
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d006      	beq.n	8002de4 <UART_SetConfig+0x168>
 8002dd6:	e00b      	b.n	8002df0 <UART_SetConfig+0x174>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e0f2      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e0ef      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e0ec      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e0e9      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e0e6      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a56      	ldr	r2, [pc, #344]	@ (8002f54 <UART_SetConfig+0x2d8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d120      	bne.n	8002e42 <UART_SetConfig+0x1c6>
 8002e00:	4b51      	ldr	r3, [pc, #324]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e0c:	d013      	beq.n	8002e36 <UART_SetConfig+0x1ba>
 8002e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e10:	d814      	bhi.n	8002e3c <UART_SetConfig+0x1c0>
 8002e12:	2b80      	cmp	r3, #128	@ 0x80
 8002e14:	d009      	beq.n	8002e2a <UART_SetConfig+0x1ae>
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d810      	bhi.n	8002e3c <UART_SetConfig+0x1c0>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <UART_SetConfig+0x1a8>
 8002e1e:	2b40      	cmp	r3, #64	@ 0x40
 8002e20:	d006      	beq.n	8002e30 <UART_SetConfig+0x1b4>
 8002e22:	e00b      	b.n	8002e3c <UART_SetConfig+0x1c0>
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e0cc      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e0c9      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e0c6      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e0c3      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e0c0      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a44      	ldr	r2, [pc, #272]	@ (8002f58 <UART_SetConfig+0x2dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d125      	bne.n	8002e98 <UART_SetConfig+0x21c>
 8002e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e5a:	d017      	beq.n	8002e8c <UART_SetConfig+0x210>
 8002e5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e60:	d817      	bhi.n	8002e92 <UART_SetConfig+0x216>
 8002e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e66:	d00b      	beq.n	8002e80 <UART_SetConfig+0x204>
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6c:	d811      	bhi.n	8002e92 <UART_SetConfig+0x216>
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <UART_SetConfig+0x1fe>
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d006      	beq.n	8002e86 <UART_SetConfig+0x20a>
 8002e78:	e00b      	b.n	8002e92 <UART_SetConfig+0x216>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	77fb      	strb	r3, [r7, #31]
 8002e7e:	e0a1      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e80:	2302      	movs	r3, #2
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e09e      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e86:	2304      	movs	r3, #4
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e09b      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e098      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e92:	2310      	movs	r3, #16
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e095      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f5c <UART_SetConfig+0x2e0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d125      	bne.n	8002eee <UART_SetConfig+0x272>
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002eac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eb0:	d017      	beq.n	8002ee2 <UART_SetConfig+0x266>
 8002eb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eb6:	d817      	bhi.n	8002ee8 <UART_SetConfig+0x26c>
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ebc:	d00b      	beq.n	8002ed6 <UART_SetConfig+0x25a>
 8002ebe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec2:	d811      	bhi.n	8002ee8 <UART_SetConfig+0x26c>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <UART_SetConfig+0x254>
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ecc:	d006      	beq.n	8002edc <UART_SetConfig+0x260>
 8002ece:	e00b      	b.n	8002ee8 <UART_SetConfig+0x26c>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e076      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	e073      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002edc:	2304      	movs	r3, #4
 8002ede:	77fb      	strb	r3, [r7, #31]
 8002ee0:	e070      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	77fb      	strb	r3, [r7, #31]
 8002ee6:	e06d      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002ee8:	2310      	movs	r3, #16
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e06a      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <UART_SetConfig+0x2e4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d138      	bne.n	8002f6a <UART_SetConfig+0x2ee>
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <UART_SetConfig+0x2cc>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f02:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f06:	d017      	beq.n	8002f38 <UART_SetConfig+0x2bc>
 8002f08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f0c:	d82a      	bhi.n	8002f64 <UART_SetConfig+0x2e8>
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d00b      	beq.n	8002f2c <UART_SetConfig+0x2b0>
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f18:	d824      	bhi.n	8002f64 <UART_SetConfig+0x2e8>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <UART_SetConfig+0x2aa>
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f22:	d006      	beq.n	8002f32 <UART_SetConfig+0x2b6>
 8002f24:	e01e      	b.n	8002f64 <UART_SetConfig+0x2e8>
 8002f26:	2300      	movs	r3, #0
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e04b      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e048      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002f32:	2304      	movs	r3, #4
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e045      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002f38:	2308      	movs	r3, #8
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e042      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002f3e:	bf00      	nop
 8002f40:	efff69f3 	.word	0xefff69f3
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	40004800 	.word	0x40004800
 8002f54:	40004c00 	.word	0x40004c00
 8002f58:	40005000 	.word	0x40005000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	40007800 	.word	0x40007800
 8002f64:	2310      	movs	r3, #16
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e02c      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a72      	ldr	r2, [pc, #456]	@ (8003138 <UART_SetConfig+0x4bc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d125      	bne.n	8002fc0 <UART_SetConfig+0x344>
 8002f74:	4b71      	ldr	r3, [pc, #452]	@ (800313c <UART_SetConfig+0x4c0>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f7e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f82:	d017      	beq.n	8002fb4 <UART_SetConfig+0x338>
 8002f84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f88:	d817      	bhi.n	8002fba <UART_SetConfig+0x33e>
 8002f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8e:	d00b      	beq.n	8002fa8 <UART_SetConfig+0x32c>
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f94:	d811      	bhi.n	8002fba <UART_SetConfig+0x33e>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <UART_SetConfig+0x326>
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f9e:	d006      	beq.n	8002fae <UART_SetConfig+0x332>
 8002fa0:	e00b      	b.n	8002fba <UART_SetConfig+0x33e>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e00d      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e00a      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002fae:	2304      	movs	r3, #4
 8002fb0:	77fb      	strb	r3, [r7, #31]
 8002fb2:	e007      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e004      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002fba:	2310      	movs	r3, #16
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e001      	b.n	8002fc4 <UART_SetConfig+0x348>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fcc:	d15b      	bne.n	8003086 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d828      	bhi.n	8003026 <UART_SetConfig+0x3aa>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <UART_SetConfig+0x360>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	08003009 	.word	0x08003009
 8002fe4:	08003011 	.word	0x08003011
 8002fe8:	08003027 	.word	0x08003027
 8002fec:	08003017 	.word	0x08003017
 8002ff0:	08003027 	.word	0x08003027
 8002ff4:	08003027 	.word	0x08003027
 8002ff8:	08003027 	.word	0x08003027
 8002ffc:	0800301f 	.word	0x0800301f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7fe fee4 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8003004:	61b8      	str	r0, [r7, #24]
        break;
 8003006:	e013      	b.n	8003030 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003008:	f7fe fef4 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800300c:	61b8      	str	r0, [r7, #24]
        break;
 800300e:	e00f      	b.n	8003030 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003010:	4b4b      	ldr	r3, [pc, #300]	@ (8003140 <UART_SetConfig+0x4c4>)
 8003012:	61bb      	str	r3, [r7, #24]
        break;
 8003014:	e00c      	b.n	8003030 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003016:	f7fe fdc7 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 800301a:	61b8      	str	r0, [r7, #24]
        break;
 800301c:	e008      	b.n	8003030 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800301e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003022:	61bb      	str	r3, [r7, #24]
        break;
 8003024:	e004      	b.n	8003030 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	77bb      	strb	r3, [r7, #30]
        break;
 800302e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d074      	beq.n	8003120 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	005a      	lsls	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	d916      	bls.n	8003080 <UART_SetConfig+0x404>
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d212      	bcs.n	8003080 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f023 030f 	bic.w	r3, r3, #15
 8003062:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b29a      	uxth	r2, r3
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	4313      	orrs	r3, r2
 8003074:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	89fa      	ldrh	r2, [r7, #14]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	e04f      	b.n	8003120 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77bb      	strb	r3, [r7, #30]
 8003084:	e04c      	b.n	8003120 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003086:	7ffb      	ldrb	r3, [r7, #31]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d828      	bhi.n	80030de <UART_SetConfig+0x462>
 800308c:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0x418>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030c9 	.word	0x080030c9
 80030a0:	080030df 	.word	0x080030df
 80030a4:	080030cf 	.word	0x080030cf
 80030a8:	080030df 	.word	0x080030df
 80030ac:	080030df 	.word	0x080030df
 80030b0:	080030df 	.word	0x080030df
 80030b4:	080030d7 	.word	0x080030d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7fe fe88 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 80030bc:	61b8      	str	r0, [r7, #24]
        break;
 80030be:	e013      	b.n	80030e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c0:	f7fe fe98 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 80030c4:	61b8      	str	r0, [r7, #24]
        break;
 80030c6:	e00f      	b.n	80030e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <UART_SetConfig+0x4c4>)
 80030ca:	61bb      	str	r3, [r7, #24]
        break;
 80030cc:	e00c      	b.n	80030e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7fe fd6b 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 80030d2:	61b8      	str	r0, [r7, #24]
        break;
 80030d4:	e008      	b.n	80030e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e004      	b.n	80030e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77bb      	strb	r3, [r7, #30]
        break;
 80030e6:	bf00      	nop
    }

    if (pclk != 0U)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d018      	beq.n	8003120 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	085a      	lsrs	r2, r3, #1
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	441a      	add	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d909      	bls.n	800311c <UART_SetConfig+0x4a0>
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800310e:	d205      	bcs.n	800311c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e001      	b.n	8003120 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800312c:	7fbb      	ldrb	r3, [r7, #30]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40007c00 	.word	0x40007c00
 800313c:	40023800 	.word	0x40023800
 8003140:	00f42400 	.word	0x00f42400

08003144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01a      	beq.n	800325a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003242:	d10a      	bne.n	800325a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
  }
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08c      	sub	sp, #48	@ 0x30
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003298:	f7fd fd0c 	bl	8000cb4 <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d12e      	bne.n	800330a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f83b 	bl	8003336 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d021      	beq.n	800330a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	e853 3f00 	ldrex	r3, [r3]
 80032d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032da:	623b      	str	r3, [r7, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	617b      	str	r3, [r7, #20]
   return(result);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e6      	bne.n	80032c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e011      	b.n	800332e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3728      	adds	r7, #40	@ 0x28
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	e04f      	b.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d04b      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fd fcb0 	bl	8000cb4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <UART_WaitOnFlagUntilTimeout+0x30>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04e      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d037      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b80      	cmp	r3, #128	@ 0x80
 800337c:	d034      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b40      	cmp	r3, #64	@ 0x40
 8003382:	d031      	beq.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b08      	cmp	r3, #8
 8003390:	d110      	bne.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2208      	movs	r2, #8
 8003398:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f838 	bl	8003410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2208      	movs	r2, #8
 80033a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e029      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033c2:	d111      	bne.n	80033e8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f81e 	bl	8003410 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e00f      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	429a      	cmp	r2, r3
 8003404:	d0a0      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b095      	sub	sp, #84	@ 0x54
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800342c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003436:	643b      	str	r3, [r7, #64]	@ 0x40
 8003438:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800343c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e6      	bne.n	8003418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3308      	adds	r3, #8
 8003450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	e853 3f00 	ldrex	r3, [r3]
 8003458:	61fb      	str	r3, [r7, #28]
   return(result);
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	f023 0301 	bic.w	r3, r3, #1
 8003460:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800346a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003472:	e841 2300 	strex	r3, r2, [r1]
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e5      	bne.n	800344a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003482:	2b01      	cmp	r3, #1
 8003484:	d118      	bne.n	80034b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	60bb      	str	r3, [r7, #8]
   return(result);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f023 0310 	bic.w	r3, r3, #16
 800349a:	647b      	str	r3, [r7, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6979      	ldr	r1, [r7, #20]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	613b      	str	r3, [r7, #16]
   return(result);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e6      	bne.n	8003486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80034cc:	bf00      	nop
 80034ce:	3754      	adds	r7, #84	@ 0x54
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fbaa 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60bb      	str	r3, [r7, #8]
   return(result);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352e:	6979      	ldr	r1, [r7, #20]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	e841 2300 	strex	r3, r2, [r1]
 8003536:	613b      	str	r3, [r7, #16]
   return(result);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1e6      	bne.n	800350c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff fb76 	bl	8002c3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003550:	bf00      	nop
 8003552:	3720      	adds	r7, #32
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <siprintf>:
 8003558:	b40e      	push	{r1, r2, r3}
 800355a:	b500      	push	{lr}
 800355c:	b09c      	sub	sp, #112	@ 0x70
 800355e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003560:	9002      	str	r0, [sp, #8]
 8003562:	9006      	str	r0, [sp, #24]
 8003564:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003568:	4809      	ldr	r0, [pc, #36]	@ (8003590 <siprintf+0x38>)
 800356a:	9107      	str	r1, [sp, #28]
 800356c:	9104      	str	r1, [sp, #16]
 800356e:	4909      	ldr	r1, [pc, #36]	@ (8003594 <siprintf+0x3c>)
 8003570:	f853 2b04 	ldr.w	r2, [r3], #4
 8003574:	9105      	str	r1, [sp, #20]
 8003576:	6800      	ldr	r0, [r0, #0]
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	a902      	add	r1, sp, #8
 800357c:	f000 f994 	bl	80038a8 <_svfiprintf_r>
 8003580:	9b02      	ldr	r3, [sp, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	b01c      	add	sp, #112	@ 0x70
 8003588:	f85d eb04 	ldr.w	lr, [sp], #4
 800358c:	b003      	add	sp, #12
 800358e:	4770      	bx	lr
 8003590:	2000000c 	.word	0x2000000c
 8003594:	ffff0208 	.word	0xffff0208

08003598 <memset>:
 8003598:	4402      	add	r2, r0
 800359a:	4603      	mov	r3, r0
 800359c:	4293      	cmp	r3, r2
 800359e:	d100      	bne.n	80035a2 <memset+0xa>
 80035a0:	4770      	bx	lr
 80035a2:	f803 1b01 	strb.w	r1, [r3], #1
 80035a6:	e7f9      	b.n	800359c <memset+0x4>

080035a8 <__errno>:
 80035a8:	4b01      	ldr	r3, [pc, #4]	@ (80035b0 <__errno+0x8>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	2000000c 	.word	0x2000000c

080035b4 <__libc_init_array>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	4d0d      	ldr	r5, [pc, #52]	@ (80035ec <__libc_init_array+0x38>)
 80035b8:	4c0d      	ldr	r4, [pc, #52]	@ (80035f0 <__libc_init_array+0x3c>)
 80035ba:	1b64      	subs	r4, r4, r5
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	2600      	movs	r6, #0
 80035c0:	42a6      	cmp	r6, r4
 80035c2:	d109      	bne.n	80035d8 <__libc_init_array+0x24>
 80035c4:	4d0b      	ldr	r5, [pc, #44]	@ (80035f4 <__libc_init_array+0x40>)
 80035c6:	4c0c      	ldr	r4, [pc, #48]	@ (80035f8 <__libc_init_array+0x44>)
 80035c8:	f000 fc66 	bl	8003e98 <_init>
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	2600      	movs	r6, #0
 80035d2:	42a6      	cmp	r6, r4
 80035d4:	d105      	bne.n	80035e2 <__libc_init_array+0x2e>
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035dc:	4798      	blx	r3
 80035de:	3601      	adds	r6, #1
 80035e0:	e7ee      	b.n	80035c0 <__libc_init_array+0xc>
 80035e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e6:	4798      	blx	r3
 80035e8:	3601      	adds	r6, #1
 80035ea:	e7f2      	b.n	80035d2 <__libc_init_array+0x1e>
 80035ec:	08003f18 	.word	0x08003f18
 80035f0:	08003f18 	.word	0x08003f18
 80035f4:	08003f18 	.word	0x08003f18
 80035f8:	08003f1c 	.word	0x08003f1c

080035fc <__retarget_lock_acquire_recursive>:
 80035fc:	4770      	bx	lr

080035fe <__retarget_lock_release_recursive>:
 80035fe:	4770      	bx	lr

08003600 <_free_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	2900      	cmp	r1, #0
 8003606:	d041      	beq.n	800368c <_free_r+0x8c>
 8003608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360c:	1f0c      	subs	r4, r1, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	18e4      	addlt	r4, r4, r3
 8003614:	f000 f8e0 	bl	80037d8 <__malloc_lock>
 8003618:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <_free_r+0x90>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	b933      	cbnz	r3, 800362c <_free_r+0x2c>
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	6014      	str	r4, [r2, #0]
 8003622:	4628      	mov	r0, r5
 8003624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003628:	f000 b8dc 	b.w	80037e4 <__malloc_unlock>
 800362c:	42a3      	cmp	r3, r4
 800362e:	d908      	bls.n	8003642 <_free_r+0x42>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428b      	cmp	r3, r1
 8003636:	bf01      	itttt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	1809      	addeq	r1, r1, r0
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	e7ed      	b.n	800361e <_free_r+0x1e>
 8003642:	461a      	mov	r2, r3
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b10b      	cbz	r3, 800364c <_free_r+0x4c>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d9fa      	bls.n	8003642 <_free_r+0x42>
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	1850      	adds	r0, r2, r1
 8003650:	42a0      	cmp	r0, r4
 8003652:	d10b      	bne.n	800366c <_free_r+0x6c>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	4401      	add	r1, r0
 8003658:	1850      	adds	r0, r2, r1
 800365a:	4283      	cmp	r3, r0
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	d1e0      	bne.n	8003622 <_free_r+0x22>
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	6053      	str	r3, [r2, #4]
 8003666:	4408      	add	r0, r1
 8003668:	6010      	str	r0, [r2, #0]
 800366a:	e7da      	b.n	8003622 <_free_r+0x22>
 800366c:	d902      	bls.n	8003674 <_free_r+0x74>
 800366e:	230c      	movs	r3, #12
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	e7d6      	b.n	8003622 <_free_r+0x22>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	1821      	adds	r1, r4, r0
 8003678:	428b      	cmp	r3, r1
 800367a:	bf04      	itt	eq
 800367c:	6819      	ldreq	r1, [r3, #0]
 800367e:	685b      	ldreq	r3, [r3, #4]
 8003680:	6063      	str	r3, [r4, #4]
 8003682:	bf04      	itt	eq
 8003684:	1809      	addeq	r1, r1, r0
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	6054      	str	r4, [r2, #4]
 800368a:	e7ca      	b.n	8003622 <_free_r+0x22>
 800368c:	bd38      	pop	{r3, r4, r5, pc}
 800368e:	bf00      	nop
 8003690:	2000024c 	.word	0x2000024c

08003694 <sbrk_aligned>:
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	4e0f      	ldr	r6, [pc, #60]	@ (80036d4 <sbrk_aligned+0x40>)
 8003698:	460c      	mov	r4, r1
 800369a:	6831      	ldr	r1, [r6, #0]
 800369c:	4605      	mov	r5, r0
 800369e:	b911      	cbnz	r1, 80036a6 <sbrk_aligned+0x12>
 80036a0:	f000 fba6 	bl	8003df0 <_sbrk_r>
 80036a4:	6030      	str	r0, [r6, #0]
 80036a6:	4621      	mov	r1, r4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 fba1 	bl	8003df0 <_sbrk_r>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	d103      	bne.n	80036ba <sbrk_aligned+0x26>
 80036b2:	f04f 34ff 	mov.w	r4, #4294967295
 80036b6:	4620      	mov	r0, r4
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	1cc4      	adds	r4, r0, #3
 80036bc:	f024 0403 	bic.w	r4, r4, #3
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d0f8      	beq.n	80036b6 <sbrk_aligned+0x22>
 80036c4:	1a21      	subs	r1, r4, r0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fb92 	bl	8003df0 <_sbrk_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d1f2      	bne.n	80036b6 <sbrk_aligned+0x22>
 80036d0:	e7ef      	b.n	80036b2 <sbrk_aligned+0x1e>
 80036d2:	bf00      	nop
 80036d4:	20000248 	.word	0x20000248

080036d8 <_malloc_r>:
 80036d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036dc:	1ccd      	adds	r5, r1, #3
 80036de:	f025 0503 	bic.w	r5, r5, #3
 80036e2:	3508      	adds	r5, #8
 80036e4:	2d0c      	cmp	r5, #12
 80036e6:	bf38      	it	cc
 80036e8:	250c      	movcc	r5, #12
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	4606      	mov	r6, r0
 80036ee:	db01      	blt.n	80036f4 <_malloc_r+0x1c>
 80036f0:	42a9      	cmp	r1, r5
 80036f2:	d904      	bls.n	80036fe <_malloc_r+0x26>
 80036f4:	230c      	movs	r3, #12
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	2000      	movs	r0, #0
 80036fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037d4 <_malloc_r+0xfc>
 8003702:	f000 f869 	bl	80037d8 <__malloc_lock>
 8003706:	f8d8 3000 	ldr.w	r3, [r8]
 800370a:	461c      	mov	r4, r3
 800370c:	bb44      	cbnz	r4, 8003760 <_malloc_r+0x88>
 800370e:	4629      	mov	r1, r5
 8003710:	4630      	mov	r0, r6
 8003712:	f7ff ffbf 	bl	8003694 <sbrk_aligned>
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	4604      	mov	r4, r0
 800371a:	d158      	bne.n	80037ce <_malloc_r+0xf6>
 800371c:	f8d8 4000 	ldr.w	r4, [r8]
 8003720:	4627      	mov	r7, r4
 8003722:	2f00      	cmp	r7, #0
 8003724:	d143      	bne.n	80037ae <_malloc_r+0xd6>
 8003726:	2c00      	cmp	r4, #0
 8003728:	d04b      	beq.n	80037c2 <_malloc_r+0xea>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	4639      	mov	r1, r7
 800372e:	4630      	mov	r0, r6
 8003730:	eb04 0903 	add.w	r9, r4, r3
 8003734:	f000 fb5c 	bl	8003df0 <_sbrk_r>
 8003738:	4581      	cmp	r9, r0
 800373a:	d142      	bne.n	80037c2 <_malloc_r+0xea>
 800373c:	6821      	ldr	r1, [r4, #0]
 800373e:	1a6d      	subs	r5, r5, r1
 8003740:	4629      	mov	r1, r5
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff ffa6 	bl	8003694 <sbrk_aligned>
 8003748:	3001      	adds	r0, #1
 800374a:	d03a      	beq.n	80037c2 <_malloc_r+0xea>
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	442b      	add	r3, r5
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	f8d8 3000 	ldr.w	r3, [r8]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	bb62      	cbnz	r2, 80037b4 <_malloc_r+0xdc>
 800375a:	f8c8 7000 	str.w	r7, [r8]
 800375e:	e00f      	b.n	8003780 <_malloc_r+0xa8>
 8003760:	6822      	ldr	r2, [r4, #0]
 8003762:	1b52      	subs	r2, r2, r5
 8003764:	d420      	bmi.n	80037a8 <_malloc_r+0xd0>
 8003766:	2a0b      	cmp	r2, #11
 8003768:	d917      	bls.n	800379a <_malloc_r+0xc2>
 800376a:	1961      	adds	r1, r4, r5
 800376c:	42a3      	cmp	r3, r4
 800376e:	6025      	str	r5, [r4, #0]
 8003770:	bf18      	it	ne
 8003772:	6059      	strne	r1, [r3, #4]
 8003774:	6863      	ldr	r3, [r4, #4]
 8003776:	bf08      	it	eq
 8003778:	f8c8 1000 	streq.w	r1, [r8]
 800377c:	5162      	str	r2, [r4, r5]
 800377e:	604b      	str	r3, [r1, #4]
 8003780:	4630      	mov	r0, r6
 8003782:	f000 f82f 	bl	80037e4 <__malloc_unlock>
 8003786:	f104 000b 	add.w	r0, r4, #11
 800378a:	1d23      	adds	r3, r4, #4
 800378c:	f020 0007 	bic.w	r0, r0, #7
 8003790:	1ac2      	subs	r2, r0, r3
 8003792:	bf1c      	itt	ne
 8003794:	1a1b      	subne	r3, r3, r0
 8003796:	50a3      	strne	r3, [r4, r2]
 8003798:	e7af      	b.n	80036fa <_malloc_r+0x22>
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	42a3      	cmp	r3, r4
 800379e:	bf0c      	ite	eq
 80037a0:	f8c8 2000 	streq.w	r2, [r8]
 80037a4:	605a      	strne	r2, [r3, #4]
 80037a6:	e7eb      	b.n	8003780 <_malloc_r+0xa8>
 80037a8:	4623      	mov	r3, r4
 80037aa:	6864      	ldr	r4, [r4, #4]
 80037ac:	e7ae      	b.n	800370c <_malloc_r+0x34>
 80037ae:	463c      	mov	r4, r7
 80037b0:	687f      	ldr	r7, [r7, #4]
 80037b2:	e7b6      	b.n	8003722 <_malloc_r+0x4a>
 80037b4:	461a      	mov	r2, r3
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	42a3      	cmp	r3, r4
 80037ba:	d1fb      	bne.n	80037b4 <_malloc_r+0xdc>
 80037bc:	2300      	movs	r3, #0
 80037be:	6053      	str	r3, [r2, #4]
 80037c0:	e7de      	b.n	8003780 <_malloc_r+0xa8>
 80037c2:	230c      	movs	r3, #12
 80037c4:	6033      	str	r3, [r6, #0]
 80037c6:	4630      	mov	r0, r6
 80037c8:	f000 f80c 	bl	80037e4 <__malloc_unlock>
 80037cc:	e794      	b.n	80036f8 <_malloc_r+0x20>
 80037ce:	6005      	str	r5, [r0, #0]
 80037d0:	e7d6      	b.n	8003780 <_malloc_r+0xa8>
 80037d2:	bf00      	nop
 80037d4:	2000024c 	.word	0x2000024c

080037d8 <__malloc_lock>:
 80037d8:	4801      	ldr	r0, [pc, #4]	@ (80037e0 <__malloc_lock+0x8>)
 80037da:	f7ff bf0f 	b.w	80035fc <__retarget_lock_acquire_recursive>
 80037de:	bf00      	nop
 80037e0:	20000244 	.word	0x20000244

080037e4 <__malloc_unlock>:
 80037e4:	4801      	ldr	r0, [pc, #4]	@ (80037ec <__malloc_unlock+0x8>)
 80037e6:	f7ff bf0a 	b.w	80035fe <__retarget_lock_release_recursive>
 80037ea:	bf00      	nop
 80037ec:	20000244 	.word	0x20000244

080037f0 <__ssputs_r>:
 80037f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	688e      	ldr	r6, [r1, #8]
 80037f6:	461f      	mov	r7, r3
 80037f8:	42be      	cmp	r6, r7
 80037fa:	680b      	ldr	r3, [r1, #0]
 80037fc:	4682      	mov	sl, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	4690      	mov	r8, r2
 8003802:	d82d      	bhi.n	8003860 <__ssputs_r+0x70>
 8003804:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003808:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800380c:	d026      	beq.n	800385c <__ssputs_r+0x6c>
 800380e:	6965      	ldr	r5, [r4, #20]
 8003810:	6909      	ldr	r1, [r1, #16]
 8003812:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003816:	eba3 0901 	sub.w	r9, r3, r1
 800381a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800381e:	1c7b      	adds	r3, r7, #1
 8003820:	444b      	add	r3, r9
 8003822:	106d      	asrs	r5, r5, #1
 8003824:	429d      	cmp	r5, r3
 8003826:	bf38      	it	cc
 8003828:	461d      	movcc	r5, r3
 800382a:	0553      	lsls	r3, r2, #21
 800382c:	d527      	bpl.n	800387e <__ssputs_r+0x8e>
 800382e:	4629      	mov	r1, r5
 8003830:	f7ff ff52 	bl	80036d8 <_malloc_r>
 8003834:	4606      	mov	r6, r0
 8003836:	b360      	cbz	r0, 8003892 <__ssputs_r+0xa2>
 8003838:	6921      	ldr	r1, [r4, #16]
 800383a:	464a      	mov	r2, r9
 800383c:	f000 fae8 	bl	8003e10 <memcpy>
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800384a:	81a3      	strh	r3, [r4, #12]
 800384c:	6126      	str	r6, [r4, #16]
 800384e:	6165      	str	r5, [r4, #20]
 8003850:	444e      	add	r6, r9
 8003852:	eba5 0509 	sub.w	r5, r5, r9
 8003856:	6026      	str	r6, [r4, #0]
 8003858:	60a5      	str	r5, [r4, #8]
 800385a:	463e      	mov	r6, r7
 800385c:	42be      	cmp	r6, r7
 800385e:	d900      	bls.n	8003862 <__ssputs_r+0x72>
 8003860:	463e      	mov	r6, r7
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	4632      	mov	r2, r6
 8003866:	4641      	mov	r1, r8
 8003868:	f000 faa8 	bl	8003dbc <memmove>
 800386c:	68a3      	ldr	r3, [r4, #8]
 800386e:	1b9b      	subs	r3, r3, r6
 8003870:	60a3      	str	r3, [r4, #8]
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	4433      	add	r3, r6
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	2000      	movs	r0, #0
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387e:	462a      	mov	r2, r5
 8003880:	f000 fad4 	bl	8003e2c <_realloc_r>
 8003884:	4606      	mov	r6, r0
 8003886:	2800      	cmp	r0, #0
 8003888:	d1e0      	bne.n	800384c <__ssputs_r+0x5c>
 800388a:	6921      	ldr	r1, [r4, #16]
 800388c:	4650      	mov	r0, sl
 800388e:	f7ff feb7 	bl	8003600 <_free_r>
 8003892:	230c      	movs	r3, #12
 8003894:	f8ca 3000 	str.w	r3, [sl]
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	e7e9      	b.n	800387a <__ssputs_r+0x8a>
	...

080038a8 <_svfiprintf_r>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	4698      	mov	r8, r3
 80038ae:	898b      	ldrh	r3, [r1, #12]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	b09d      	sub	sp, #116	@ 0x74
 80038b4:	4607      	mov	r7, r0
 80038b6:	460d      	mov	r5, r1
 80038b8:	4614      	mov	r4, r2
 80038ba:	d510      	bpl.n	80038de <_svfiprintf_r+0x36>
 80038bc:	690b      	ldr	r3, [r1, #16]
 80038be:	b973      	cbnz	r3, 80038de <_svfiprintf_r+0x36>
 80038c0:	2140      	movs	r1, #64	@ 0x40
 80038c2:	f7ff ff09 	bl	80036d8 <_malloc_r>
 80038c6:	6028      	str	r0, [r5, #0]
 80038c8:	6128      	str	r0, [r5, #16]
 80038ca:	b930      	cbnz	r0, 80038da <_svfiprintf_r+0x32>
 80038cc:	230c      	movs	r3, #12
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	b01d      	add	sp, #116	@ 0x74
 80038d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038da:	2340      	movs	r3, #64	@ 0x40
 80038dc:	616b      	str	r3, [r5, #20]
 80038de:	2300      	movs	r3, #0
 80038e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038e2:	2320      	movs	r3, #32
 80038e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038ec:	2330      	movs	r3, #48	@ 0x30
 80038ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a8c <_svfiprintf_r+0x1e4>
 80038f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038f6:	f04f 0901 	mov.w	r9, #1
 80038fa:	4623      	mov	r3, r4
 80038fc:	469a      	mov	sl, r3
 80038fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003902:	b10a      	cbz	r2, 8003908 <_svfiprintf_r+0x60>
 8003904:	2a25      	cmp	r2, #37	@ 0x25
 8003906:	d1f9      	bne.n	80038fc <_svfiprintf_r+0x54>
 8003908:	ebba 0b04 	subs.w	fp, sl, r4
 800390c:	d00b      	beq.n	8003926 <_svfiprintf_r+0x7e>
 800390e:	465b      	mov	r3, fp
 8003910:	4622      	mov	r2, r4
 8003912:	4629      	mov	r1, r5
 8003914:	4638      	mov	r0, r7
 8003916:	f7ff ff6b 	bl	80037f0 <__ssputs_r>
 800391a:	3001      	adds	r0, #1
 800391c:	f000 80a7 	beq.w	8003a6e <_svfiprintf_r+0x1c6>
 8003920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003922:	445a      	add	r2, fp
 8003924:	9209      	str	r2, [sp, #36]	@ 0x24
 8003926:	f89a 3000 	ldrb.w	r3, [sl]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 809f 	beq.w	8003a6e <_svfiprintf_r+0x1c6>
 8003930:	2300      	movs	r3, #0
 8003932:	f04f 32ff 	mov.w	r2, #4294967295
 8003936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800393a:	f10a 0a01 	add.w	sl, sl, #1
 800393e:	9304      	str	r3, [sp, #16]
 8003940:	9307      	str	r3, [sp, #28]
 8003942:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003946:	931a      	str	r3, [sp, #104]	@ 0x68
 8003948:	4654      	mov	r4, sl
 800394a:	2205      	movs	r2, #5
 800394c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003950:	484e      	ldr	r0, [pc, #312]	@ (8003a8c <_svfiprintf_r+0x1e4>)
 8003952:	f7fc fc5d 	bl	8000210 <memchr>
 8003956:	9a04      	ldr	r2, [sp, #16]
 8003958:	b9d8      	cbnz	r0, 8003992 <_svfiprintf_r+0xea>
 800395a:	06d0      	lsls	r0, r2, #27
 800395c:	bf44      	itt	mi
 800395e:	2320      	movmi	r3, #32
 8003960:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003964:	0711      	lsls	r1, r2, #28
 8003966:	bf44      	itt	mi
 8003968:	232b      	movmi	r3, #43	@ 0x2b
 800396a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b2a      	cmp	r3, #42	@ 0x2a
 8003974:	d015      	beq.n	80039a2 <_svfiprintf_r+0xfa>
 8003976:	9a07      	ldr	r2, [sp, #28]
 8003978:	4654      	mov	r4, sl
 800397a:	2000      	movs	r0, #0
 800397c:	f04f 0c0a 	mov.w	ip, #10
 8003980:	4621      	mov	r1, r4
 8003982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003986:	3b30      	subs	r3, #48	@ 0x30
 8003988:	2b09      	cmp	r3, #9
 800398a:	d94b      	bls.n	8003a24 <_svfiprintf_r+0x17c>
 800398c:	b1b0      	cbz	r0, 80039bc <_svfiprintf_r+0x114>
 800398e:	9207      	str	r2, [sp, #28]
 8003990:	e014      	b.n	80039bc <_svfiprintf_r+0x114>
 8003992:	eba0 0308 	sub.w	r3, r0, r8
 8003996:	fa09 f303 	lsl.w	r3, r9, r3
 800399a:	4313      	orrs	r3, r2
 800399c:	9304      	str	r3, [sp, #16]
 800399e:	46a2      	mov	sl, r4
 80039a0:	e7d2      	b.n	8003948 <_svfiprintf_r+0xa0>
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	1d19      	adds	r1, r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	9103      	str	r1, [sp, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	bfbb      	ittet	lt
 80039ae:	425b      	neglt	r3, r3
 80039b0:	f042 0202 	orrlt.w	r2, r2, #2
 80039b4:	9307      	strge	r3, [sp, #28]
 80039b6:	9307      	strlt	r3, [sp, #28]
 80039b8:	bfb8      	it	lt
 80039ba:	9204      	strlt	r2, [sp, #16]
 80039bc:	7823      	ldrb	r3, [r4, #0]
 80039be:	2b2e      	cmp	r3, #46	@ 0x2e
 80039c0:	d10a      	bne.n	80039d8 <_svfiprintf_r+0x130>
 80039c2:	7863      	ldrb	r3, [r4, #1]
 80039c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80039c6:	d132      	bne.n	8003a2e <_svfiprintf_r+0x186>
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	9203      	str	r2, [sp, #12]
 80039d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039d4:	3402      	adds	r4, #2
 80039d6:	9305      	str	r3, [sp, #20]
 80039d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003a9c <_svfiprintf_r+0x1f4>
 80039dc:	7821      	ldrb	r1, [r4, #0]
 80039de:	2203      	movs	r2, #3
 80039e0:	4650      	mov	r0, sl
 80039e2:	f7fc fc15 	bl	8000210 <memchr>
 80039e6:	b138      	cbz	r0, 80039f8 <_svfiprintf_r+0x150>
 80039e8:	9b04      	ldr	r3, [sp, #16]
 80039ea:	eba0 000a 	sub.w	r0, r0, sl
 80039ee:	2240      	movs	r2, #64	@ 0x40
 80039f0:	4082      	lsls	r2, r0
 80039f2:	4313      	orrs	r3, r2
 80039f4:	3401      	adds	r4, #1
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fc:	4824      	ldr	r0, [pc, #144]	@ (8003a90 <_svfiprintf_r+0x1e8>)
 80039fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a02:	2206      	movs	r2, #6
 8003a04:	f7fc fc04 	bl	8000210 <memchr>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d036      	beq.n	8003a7a <_svfiprintf_r+0x1d2>
 8003a0c:	4b21      	ldr	r3, [pc, #132]	@ (8003a94 <_svfiprintf_r+0x1ec>)
 8003a0e:	bb1b      	cbnz	r3, 8003a58 <_svfiprintf_r+0x1b0>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	3307      	adds	r3, #7
 8003a14:	f023 0307 	bic.w	r3, r3, #7
 8003a18:	3308      	adds	r3, #8
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a1e:	4433      	add	r3, r6
 8003a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a22:	e76a      	b.n	80038fa <_svfiprintf_r+0x52>
 8003a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a28:	460c      	mov	r4, r1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	e7a8      	b.n	8003980 <_svfiprintf_r+0xd8>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	3401      	adds	r4, #1
 8003a32:	9305      	str	r3, [sp, #20]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f04f 0c0a 	mov.w	ip, #10
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a40:	3a30      	subs	r2, #48	@ 0x30
 8003a42:	2a09      	cmp	r2, #9
 8003a44:	d903      	bls.n	8003a4e <_svfiprintf_r+0x1a6>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0c6      	beq.n	80039d8 <_svfiprintf_r+0x130>
 8003a4a:	9105      	str	r1, [sp, #20]
 8003a4c:	e7c4      	b.n	80039d8 <_svfiprintf_r+0x130>
 8003a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a52:	4604      	mov	r4, r0
 8003a54:	2301      	movs	r3, #1
 8003a56:	e7f0      	b.n	8003a3a <_svfiprintf_r+0x192>
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <_svfiprintf_r+0x1f0>)
 8003a60:	a904      	add	r1, sp, #16
 8003a62:	4638      	mov	r0, r7
 8003a64:	f3af 8000 	nop.w
 8003a68:	1c42      	adds	r2, r0, #1
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	d1d6      	bne.n	8003a1c <_svfiprintf_r+0x174>
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	f53f af2d 	bmi.w	80038d0 <_svfiprintf_r+0x28>
 8003a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a78:	e72c      	b.n	80038d4 <_svfiprintf_r+0x2c>
 8003a7a:	ab03      	add	r3, sp, #12
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462a      	mov	r2, r5
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <_svfiprintf_r+0x1f0>)
 8003a82:	a904      	add	r1, sp, #16
 8003a84:	4638      	mov	r0, r7
 8003a86:	f000 f879 	bl	8003b7c <_printf_i>
 8003a8a:	e7ed      	b.n	8003a68 <_svfiprintf_r+0x1c0>
 8003a8c:	08003edc 	.word	0x08003edc
 8003a90:	08003ee6 	.word	0x08003ee6
 8003a94:	00000000 	.word	0x00000000
 8003a98:	080037f1 	.word	0x080037f1
 8003a9c:	08003ee2 	.word	0x08003ee2

08003aa0 <_printf_common>:
 8003aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	4698      	mov	r8, r3
 8003aa8:	688a      	ldr	r2, [r1, #8]
 8003aaa:	690b      	ldr	r3, [r1, #16]
 8003aac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bfb8      	it	lt
 8003ab4:	4613      	movlt	r3, r2
 8003ab6:	6033      	str	r3, [r6, #0]
 8003ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003abc:	4607      	mov	r7, r0
 8003abe:	460c      	mov	r4, r1
 8003ac0:	b10a      	cbz	r2, 8003ac6 <_printf_common+0x26>
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	6033      	str	r3, [r6, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	0699      	lsls	r1, r3, #26
 8003aca:	bf42      	ittt	mi
 8003acc:	6833      	ldrmi	r3, [r6, #0]
 8003ace:	3302      	addmi	r3, #2
 8003ad0:	6033      	strmi	r3, [r6, #0]
 8003ad2:	6825      	ldr	r5, [r4, #0]
 8003ad4:	f015 0506 	ands.w	r5, r5, #6
 8003ad8:	d106      	bne.n	8003ae8 <_printf_common+0x48>
 8003ada:	f104 0a19 	add.w	sl, r4, #25
 8003ade:	68e3      	ldr	r3, [r4, #12]
 8003ae0:	6832      	ldr	r2, [r6, #0]
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	42ab      	cmp	r3, r5
 8003ae6:	dc26      	bgt.n	8003b36 <_printf_common+0x96>
 8003ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003aec:	6822      	ldr	r2, [r4, #0]
 8003aee:	3b00      	subs	r3, #0
 8003af0:	bf18      	it	ne
 8003af2:	2301      	movne	r3, #1
 8003af4:	0692      	lsls	r2, r2, #26
 8003af6:	d42b      	bmi.n	8003b50 <_printf_common+0xb0>
 8003af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003afc:	4641      	mov	r1, r8
 8003afe:	4638      	mov	r0, r7
 8003b00:	47c8      	blx	r9
 8003b02:	3001      	adds	r0, #1
 8003b04:	d01e      	beq.n	8003b44 <_printf_common+0xa4>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	6922      	ldr	r2, [r4, #16]
 8003b0a:	f003 0306 	and.w	r3, r3, #6
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	bf02      	ittt	eq
 8003b12:	68e5      	ldreq	r5, [r4, #12]
 8003b14:	6833      	ldreq	r3, [r6, #0]
 8003b16:	1aed      	subeq	r5, r5, r3
 8003b18:	68a3      	ldr	r3, [r4, #8]
 8003b1a:	bf0c      	ite	eq
 8003b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b20:	2500      	movne	r5, #0
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bfc4      	itt	gt
 8003b26:	1a9b      	subgt	r3, r3, r2
 8003b28:	18ed      	addgt	r5, r5, r3
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	341a      	adds	r4, #26
 8003b2e:	42b5      	cmp	r5, r6
 8003b30:	d11a      	bne.n	8003b68 <_printf_common+0xc8>
 8003b32:	2000      	movs	r0, #0
 8003b34:	e008      	b.n	8003b48 <_printf_common+0xa8>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4652      	mov	r2, sl
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c8      	blx	r9
 8003b40:	3001      	adds	r0, #1
 8003b42:	d103      	bne.n	8003b4c <_printf_common+0xac>
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	3501      	adds	r5, #1
 8003b4e:	e7c6      	b.n	8003ade <_printf_common+0x3e>
 8003b50:	18e1      	adds	r1, r4, r3
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	2030      	movs	r0, #48	@ 0x30
 8003b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b5a:	4422      	add	r2, r4
 8003b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b64:	3302      	adds	r3, #2
 8003b66:	e7c7      	b.n	8003af8 <_printf_common+0x58>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	4638      	mov	r0, r7
 8003b70:	47c8      	blx	r9
 8003b72:	3001      	adds	r0, #1
 8003b74:	d0e6      	beq.n	8003b44 <_printf_common+0xa4>
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7d9      	b.n	8003b2e <_printf_common+0x8e>
	...

08003b7c <_printf_i>:
 8003b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	7e0f      	ldrb	r7, [r1, #24]
 8003b82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b84:	2f78      	cmp	r7, #120	@ 0x78
 8003b86:	4691      	mov	r9, r2
 8003b88:	4680      	mov	r8, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	469a      	mov	sl, r3
 8003b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b92:	d807      	bhi.n	8003ba4 <_printf_i+0x28>
 8003b94:	2f62      	cmp	r7, #98	@ 0x62
 8003b96:	d80a      	bhi.n	8003bae <_printf_i+0x32>
 8003b98:	2f00      	cmp	r7, #0
 8003b9a:	f000 80d2 	beq.w	8003d42 <_printf_i+0x1c6>
 8003b9e:	2f58      	cmp	r7, #88	@ 0x58
 8003ba0:	f000 80b9 	beq.w	8003d16 <_printf_i+0x19a>
 8003ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bac:	e03a      	b.n	8003c24 <_printf_i+0xa8>
 8003bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bb2:	2b15      	cmp	r3, #21
 8003bb4:	d8f6      	bhi.n	8003ba4 <_printf_i+0x28>
 8003bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8003bbc <_printf_i+0x40>)
 8003bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c29 	.word	0x08003c29
 8003bc4:	08003ba5 	.word	0x08003ba5
 8003bc8:	08003ba5 	.word	0x08003ba5
 8003bcc:	08003ba5 	.word	0x08003ba5
 8003bd0:	08003ba5 	.word	0x08003ba5
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003ba5 	.word	0x08003ba5
 8003bdc:	08003ba5 	.word	0x08003ba5
 8003be0:	08003ba5 	.word	0x08003ba5
 8003be4:	08003ba5 	.word	0x08003ba5
 8003be8:	08003d29 	.word	0x08003d29
 8003bec:	08003c53 	.word	0x08003c53
 8003bf0:	08003ce3 	.word	0x08003ce3
 8003bf4:	08003ba5 	.word	0x08003ba5
 8003bf8:	08003ba5 	.word	0x08003ba5
 8003bfc:	08003d4b 	.word	0x08003d4b
 8003c00:	08003ba5 	.word	0x08003ba5
 8003c04:	08003c53 	.word	0x08003c53
 8003c08:	08003ba5 	.word	0x08003ba5
 8003c0c:	08003ba5 	.word	0x08003ba5
 8003c10:	08003ceb 	.word	0x08003ceb
 8003c14:	6833      	ldr	r3, [r6, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6032      	str	r2, [r6, #0]
 8003c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c24:	2301      	movs	r3, #1
 8003c26:	e09d      	b.n	8003d64 <_printf_i+0x1e8>
 8003c28:	6833      	ldr	r3, [r6, #0]
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	1d19      	adds	r1, r3, #4
 8003c2e:	6031      	str	r1, [r6, #0]
 8003c30:	0606      	lsls	r6, r0, #24
 8003c32:	d501      	bpl.n	8003c38 <_printf_i+0xbc>
 8003c34:	681d      	ldr	r5, [r3, #0]
 8003c36:	e003      	b.n	8003c40 <_printf_i+0xc4>
 8003c38:	0645      	lsls	r5, r0, #25
 8003c3a:	d5fb      	bpl.n	8003c34 <_printf_i+0xb8>
 8003c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c40:	2d00      	cmp	r5, #0
 8003c42:	da03      	bge.n	8003c4c <_printf_i+0xd0>
 8003c44:	232d      	movs	r3, #45	@ 0x2d
 8003c46:	426d      	negs	r5, r5
 8003c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c4c:	4859      	ldr	r0, [pc, #356]	@ (8003db4 <_printf_i+0x238>)
 8003c4e:	230a      	movs	r3, #10
 8003c50:	e011      	b.n	8003c76 <_printf_i+0xfa>
 8003c52:	6821      	ldr	r1, [r4, #0]
 8003c54:	6833      	ldr	r3, [r6, #0]
 8003c56:	0608      	lsls	r0, r1, #24
 8003c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c5c:	d402      	bmi.n	8003c64 <_printf_i+0xe8>
 8003c5e:	0649      	lsls	r1, r1, #25
 8003c60:	bf48      	it	mi
 8003c62:	b2ad      	uxthmi	r5, r5
 8003c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c66:	4853      	ldr	r0, [pc, #332]	@ (8003db4 <_printf_i+0x238>)
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	bf14      	ite	ne
 8003c6c:	230a      	movne	r3, #10
 8003c6e:	2308      	moveq	r3, #8
 8003c70:	2100      	movs	r1, #0
 8003c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c76:	6866      	ldr	r6, [r4, #4]
 8003c78:	60a6      	str	r6, [r4, #8]
 8003c7a:	2e00      	cmp	r6, #0
 8003c7c:	bfa2      	ittt	ge
 8003c7e:	6821      	ldrge	r1, [r4, #0]
 8003c80:	f021 0104 	bicge.w	r1, r1, #4
 8003c84:	6021      	strge	r1, [r4, #0]
 8003c86:	b90d      	cbnz	r5, 8003c8c <_printf_i+0x110>
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	d04b      	beq.n	8003d24 <_printf_i+0x1a8>
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c92:	fb03 5711 	mls	r7, r3, r1, r5
 8003c96:	5dc7      	ldrb	r7, [r0, r7]
 8003c98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c9c:	462f      	mov	r7, r5
 8003c9e:	42bb      	cmp	r3, r7
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	d9f4      	bls.n	8003c8e <_printf_i+0x112>
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d10b      	bne.n	8003cc0 <_printf_i+0x144>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	07df      	lsls	r7, r3, #31
 8003cac:	d508      	bpl.n	8003cc0 <_printf_i+0x144>
 8003cae:	6923      	ldr	r3, [r4, #16]
 8003cb0:	6861      	ldr	r1, [r4, #4]
 8003cb2:	4299      	cmp	r1, r3
 8003cb4:	bfde      	ittt	le
 8003cb6:	2330      	movle	r3, #48	@ 0x30
 8003cb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cc0:	1b92      	subs	r2, r2, r6
 8003cc2:	6122      	str	r2, [r4, #16]
 8003cc4:	f8cd a000 	str.w	sl, [sp]
 8003cc8:	464b      	mov	r3, r9
 8003cca:	aa03      	add	r2, sp, #12
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4640      	mov	r0, r8
 8003cd0:	f7ff fee6 	bl	8003aa0 <_printf_common>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d14a      	bne.n	8003d6e <_printf_i+0x1f2>
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	b004      	add	sp, #16
 8003cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	f043 0320 	orr.w	r3, r3, #32
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	4833      	ldr	r0, [pc, #204]	@ (8003db8 <_printf_i+0x23c>)
 8003cec:	2778      	movs	r7, #120	@ 0x78
 8003cee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	6831      	ldr	r1, [r6, #0]
 8003cf6:	061f      	lsls	r7, r3, #24
 8003cf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cfc:	d402      	bmi.n	8003d04 <_printf_i+0x188>
 8003cfe:	065f      	lsls	r7, r3, #25
 8003d00:	bf48      	it	mi
 8003d02:	b2ad      	uxthmi	r5, r5
 8003d04:	6031      	str	r1, [r6, #0]
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	bf44      	itt	mi
 8003d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d0e:	6023      	strmi	r3, [r4, #0]
 8003d10:	b11d      	cbz	r5, 8003d1a <_printf_i+0x19e>
 8003d12:	2310      	movs	r3, #16
 8003d14:	e7ac      	b.n	8003c70 <_printf_i+0xf4>
 8003d16:	4827      	ldr	r0, [pc, #156]	@ (8003db4 <_printf_i+0x238>)
 8003d18:	e7e9      	b.n	8003cee <_printf_i+0x172>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	f023 0320 	bic.w	r3, r3, #32
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	e7f6      	b.n	8003d12 <_printf_i+0x196>
 8003d24:	4616      	mov	r6, r2
 8003d26:	e7bd      	b.n	8003ca4 <_printf_i+0x128>
 8003d28:	6833      	ldr	r3, [r6, #0]
 8003d2a:	6825      	ldr	r5, [r4, #0]
 8003d2c:	6961      	ldr	r1, [r4, #20]
 8003d2e:	1d18      	adds	r0, r3, #4
 8003d30:	6030      	str	r0, [r6, #0]
 8003d32:	062e      	lsls	r6, r5, #24
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	d501      	bpl.n	8003d3c <_printf_i+0x1c0>
 8003d38:	6019      	str	r1, [r3, #0]
 8003d3a:	e002      	b.n	8003d42 <_printf_i+0x1c6>
 8003d3c:	0668      	lsls	r0, r5, #25
 8003d3e:	d5fb      	bpl.n	8003d38 <_printf_i+0x1bc>
 8003d40:	8019      	strh	r1, [r3, #0]
 8003d42:	2300      	movs	r3, #0
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	4616      	mov	r6, r2
 8003d48:	e7bc      	b.n	8003cc4 <_printf_i+0x148>
 8003d4a:	6833      	ldr	r3, [r6, #0]
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	6032      	str	r2, [r6, #0]
 8003d50:	681e      	ldr	r6, [r3, #0]
 8003d52:	6862      	ldr	r2, [r4, #4]
 8003d54:	2100      	movs	r1, #0
 8003d56:	4630      	mov	r0, r6
 8003d58:	f7fc fa5a 	bl	8000210 <memchr>
 8003d5c:	b108      	cbz	r0, 8003d62 <_printf_i+0x1e6>
 8003d5e:	1b80      	subs	r0, r0, r6
 8003d60:	6060      	str	r0, [r4, #4]
 8003d62:	6863      	ldr	r3, [r4, #4]
 8003d64:	6123      	str	r3, [r4, #16]
 8003d66:	2300      	movs	r3, #0
 8003d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d6c:	e7aa      	b.n	8003cc4 <_printf_i+0x148>
 8003d6e:	6923      	ldr	r3, [r4, #16]
 8003d70:	4632      	mov	r2, r6
 8003d72:	4649      	mov	r1, r9
 8003d74:	4640      	mov	r0, r8
 8003d76:	47d0      	blx	sl
 8003d78:	3001      	adds	r0, #1
 8003d7a:	d0ad      	beq.n	8003cd8 <_printf_i+0x15c>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	079b      	lsls	r3, r3, #30
 8003d80:	d413      	bmi.n	8003daa <_printf_i+0x22e>
 8003d82:	68e0      	ldr	r0, [r4, #12]
 8003d84:	9b03      	ldr	r3, [sp, #12]
 8003d86:	4298      	cmp	r0, r3
 8003d88:	bfb8      	it	lt
 8003d8a:	4618      	movlt	r0, r3
 8003d8c:	e7a6      	b.n	8003cdc <_printf_i+0x160>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4632      	mov	r2, r6
 8003d92:	4649      	mov	r1, r9
 8003d94:	4640      	mov	r0, r8
 8003d96:	47d0      	blx	sl
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d09d      	beq.n	8003cd8 <_printf_i+0x15c>
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	68e3      	ldr	r3, [r4, #12]
 8003da0:	9903      	ldr	r1, [sp, #12]
 8003da2:	1a5b      	subs	r3, r3, r1
 8003da4:	42ab      	cmp	r3, r5
 8003da6:	dcf2      	bgt.n	8003d8e <_printf_i+0x212>
 8003da8:	e7eb      	b.n	8003d82 <_printf_i+0x206>
 8003daa:	2500      	movs	r5, #0
 8003dac:	f104 0619 	add.w	r6, r4, #25
 8003db0:	e7f5      	b.n	8003d9e <_printf_i+0x222>
 8003db2:	bf00      	nop
 8003db4:	08003eed 	.word	0x08003eed
 8003db8:	08003efe 	.word	0x08003efe

08003dbc <memmove>:
 8003dbc:	4288      	cmp	r0, r1
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	eb01 0402 	add.w	r4, r1, r2
 8003dc4:	d902      	bls.n	8003dcc <memmove+0x10>
 8003dc6:	4284      	cmp	r4, r0
 8003dc8:	4623      	mov	r3, r4
 8003dca:	d807      	bhi.n	8003ddc <memmove+0x20>
 8003dcc:	1e43      	subs	r3, r0, #1
 8003dce:	42a1      	cmp	r1, r4
 8003dd0:	d008      	beq.n	8003de4 <memmove+0x28>
 8003dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dda:	e7f8      	b.n	8003dce <memmove+0x12>
 8003ddc:	4402      	add	r2, r0
 8003dde:	4601      	mov	r1, r0
 8003de0:	428a      	cmp	r2, r1
 8003de2:	d100      	bne.n	8003de6 <memmove+0x2a>
 8003de4:	bd10      	pop	{r4, pc}
 8003de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dee:	e7f7      	b.n	8003de0 <memmove+0x24>

08003df0 <_sbrk_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d06      	ldr	r5, [pc, #24]	@ (8003e0c <_sbrk_r+0x1c>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fc fe98 	bl	8000b30 <_sbrk>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_sbrk_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_sbrk_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20000240 	.word	0x20000240

08003e10 <memcpy>:
 8003e10:	440a      	add	r2, r1
 8003e12:	4291      	cmp	r1, r2
 8003e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e18:	d100      	bne.n	8003e1c <memcpy+0xc>
 8003e1a:	4770      	bx	lr
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e26:	4291      	cmp	r1, r2
 8003e28:	d1f9      	bne.n	8003e1e <memcpy+0xe>
 8003e2a:	bd10      	pop	{r4, pc}

08003e2c <_realloc_r>:
 8003e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e30:	4680      	mov	r8, r0
 8003e32:	4615      	mov	r5, r2
 8003e34:	460c      	mov	r4, r1
 8003e36:	b921      	cbnz	r1, 8003e42 <_realloc_r+0x16>
 8003e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	f7ff bc4b 	b.w	80036d8 <_malloc_r>
 8003e42:	b92a      	cbnz	r2, 8003e50 <_realloc_r+0x24>
 8003e44:	f7ff fbdc 	bl	8003600 <_free_r>
 8003e48:	2400      	movs	r4, #0
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e50:	f000 f81a 	bl	8003e88 <_malloc_usable_size_r>
 8003e54:	4285      	cmp	r5, r0
 8003e56:	4606      	mov	r6, r0
 8003e58:	d802      	bhi.n	8003e60 <_realloc_r+0x34>
 8003e5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e5e:	d8f4      	bhi.n	8003e4a <_realloc_r+0x1e>
 8003e60:	4629      	mov	r1, r5
 8003e62:	4640      	mov	r0, r8
 8003e64:	f7ff fc38 	bl	80036d8 <_malloc_r>
 8003e68:	4607      	mov	r7, r0
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d0ec      	beq.n	8003e48 <_realloc_r+0x1c>
 8003e6e:	42b5      	cmp	r5, r6
 8003e70:	462a      	mov	r2, r5
 8003e72:	4621      	mov	r1, r4
 8003e74:	bf28      	it	cs
 8003e76:	4632      	movcs	r2, r6
 8003e78:	f7ff ffca 	bl	8003e10 <memcpy>
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f7ff fbbe 	bl	8003600 <_free_r>
 8003e84:	463c      	mov	r4, r7
 8003e86:	e7e0      	b.n	8003e4a <_realloc_r+0x1e>

08003e88 <_malloc_usable_size_r>:
 8003e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8c:	1f18      	subs	r0, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfbc      	itt	lt
 8003e92:	580b      	ldrlt	r3, [r1, r0]
 8003e94:	18c0      	addlt	r0, r0, r3
 8003e96:	4770      	bx	lr

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
